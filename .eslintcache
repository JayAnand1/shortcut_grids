[{"/Users/jayanand/Development/React/shortcut_grids/src/App.js":"1","/Users/jayanand/Development/React/shortcut_grids/src/index.js":"2","/Users/jayanand/Development/React/shortcut_grids/src/components/CategoryCard.js":"3","/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/EditCategoryCardDialog.js":"4","/Users/jayanand/Development/React/shortcut_grids/src/components/CategoryCardItem.js":"5","/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/AddCategoryDialog.js":"6","/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/EditCardItemDialog.js":"7","/Users/jayanand/Development/React/shortcut_grids/src/components/TopBar.js":"8","/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/SettingsDialog.js":"9","/Users/jayanand/Development/React/shortcut_grids/src/reportWebVitals.js":"10","/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/AddBookmarkDialog.js":"11"},{"size":9000,"mtime":1607819731450,"results":"12","hashOfConfig":"13"},{"size":500,"mtime":1607818761619,"results":"14","hashOfConfig":"13"},{"size":7744,"mtime":1607815824698,"results":"15","hashOfConfig":"13"},{"size":5842,"mtime":1607815824701,"results":"16","hashOfConfig":"13"},{"size":3428,"mtime":1607815824699,"results":"17","hashOfConfig":"13"},{"size":5449,"mtime":1607815824699,"results":"18","hashOfConfig":"13"},{"size":3155,"mtime":1607815824700,"results":"19","hashOfConfig":"13"},{"size":7498,"mtime":1607815824704,"results":"20","hashOfConfig":"13"},{"size":6271,"mtime":1607815824701,"results":"21","hashOfConfig":"13"},{"size":362,"mtime":1607126883870,"results":"22","hashOfConfig":"13"},{"size":2770,"mtime":1607815824699,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1rmvsni",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayanand/Development/React/shortcut_grids/src/App.js",["52"],"import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { Container, Snackbar, Grid } from \"@material-ui/core\";\nimport TopBar from \"./components/TopBar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport AddCategoryDialog from \"./components/DialogBoxes/AddCategoryDialog\";\nimport CategoryCard from \"./components/CategoryCard\";\nimport AddBookmarkDialog from \"./components/DialogBoxes/AddBookmarkDialog\";\nimport SettingsDialog from \"./components/DialogBoxes/SettingsDialog\";\nimport EditCardItemDialog from \"./components/DialogBoxes/EditCardItemDialog\";\nimport EditCardCategoryDialog from \"./components/DialogBoxes/EditCategoryCardDialog\";\n\nclass App extends Component {\n  state = {\n    categories: [], // {label, url, color, icon} {categoryLabel : \"\", categoryDescription : \"\",  bookmarks : [{ label, }], id: }\n    dialogStatus: { type: \"\", active: false, selectedId: null }, // {type, active}\n    showSnackBar: false,\n    snackBarMessage: \"\",\n    snackBarSeverity: \"\",\n    selectedCategoryId: null,\n    masterBackgroundColour: null,\n    settings: {},\n    selectedBookmark: null,\n    selectedCategory: null,\n  };\n\n  updateList = (newList) => {\n    localStorage.setItem(\"categories\", JSON.stringify(newList));\n  };\n\n  handleNewBookmark = (bookmark, id, dialog) => {\n    var category = this.state.categories.filter(\n      (category) => category.id === id\n    )[0];\n    category[\"bookmarks\"] = category[\"bookmarks\"].concat(bookmark);\n    var newCategories = this.state.categories;\n    for (var i = 0; i < newCategories.length; i++) {\n      if (newCategories[i].id === category.id) {\n        newCategories[i] = category;\n      }\n    }\n    this.setState({ categories: newCategories });\n    this.updateList(newCategories);\n    this.handleSnackBar(`Add Bookmark to ${category.category}`, \"info\");\n    this.handleDialogStatus(dialog);\n  };\n\n  handleSnackBar = (message, severity) => {\n    this.setState({ showSnackBar: true });\n    this.setState({ snackBarMessage: message, snackBarSeverity: severity });\n  };\n\n  handleDelete = (id) => {\n    let newList = this.state.categories.filter((item) => item.id !== id);\n    this.setState({ categories: newList });\n    this.updateList(newList);\n    this.handleSnackBar(\"Deleted Successfully\", \"info\");\n  };\n\n  handleNewCategory = (category, dialog) => {\n    const newCategories = this.state.categories.concat(category);\n    this.setState({ categories: newCategories });\n    this.updateList(newCategories);\n    this.handleSnackBar(\"Added Successfully\", \"success\");\n    this.handleDialogStatus(dialog);\n  };\n\n  handleNewBookmarkDialog = (categoryId, dialog) => {\n    this.handleSelectedCategoryId(categoryId);\n    this.handleDialogStatus(dialog);\n  };\n\n  handleSettings = (categoryId, dialog) => {\n    this.handleSelectedCategoryId(categoryId);\n    this.handleDialogStatus(dialog);\n    this.handleBackgroundColor();\n  };\n\n  handleBackgroundColour = (colour) => {\n    const { settings } = this.state;\n    settings.colour = colour;\n    this.setState({ settings });\n    localStorage.setItem(\"settings\", JSON.stringify(settings));\n  };\n\n  handleEditBookmark = (id) => {\n    const { categories } = this.state;\n    for (var i = 0; i < categories.length; i++) {\n      for (var j = 0; j < categories[i].bookmarks.length; j++) {\n        if (categories[i].bookmarks[j].id === id) {\n          this.setState({ selectedBookmark: categories[i].bookmarks[j] });\n          break;\n        }\n      }\n    }\n  };\n\n  handleUpdateBookmark = (bookmark, dialog) => {\n    const { categories } = this.state;\n    for (var i = 0; i < categories.length; i++) {\n      for (var j = 0; j < categories[i].bookmarks.length; j++) {\n        if (categories[i].bookmarks[j].id === bookmark.id) {\n          categories[i].bookmarks[j] = bookmark;\n          this.setState({ categories });\n          this.updateList(categories);\n          break;\n        }\n      }\n    }\n    this.handleDialogStatus(dialog);\n  };\n\n  setCategory = (id) => {\n    const { categories } = this.state;\n    const category = categories.find((category) => category.id === id);\n    this.setState({ selectedCategory: category });\n  };\n\n  handleCategoryDetails = (category, dialog) => {\n    const { categories } = this.state;\n\n    for (var i = 0; i < categories.length; i++) {\n      if (categories[i].id === category.id) {\n        categories[i] = category;\n        break;\n      }\n    }\n    this.setState({ categories });\n    this.updateList(categories);\n    this.handleDialogStatus(dialog);\n  };\n\n  handleDialogStatus = (dialog) => {\n    this.setState({ dialogStatus: dialog });\n    if (dialog.type === \"editCardItem\") {\n      this.handleEditBookmark(dialog.selectedId);\n    }\n    if (dialog.type === \"editCardCategory\") {\n      this.setCategory(dialog.selectedId);\n    }\n  };\n\n  handleSelectedCategoryId = (id) => {\n    this.setState({ selectedCategoryId: id });\n  };\n\n  handleDeleteBookMark = (id, dialog) => {\n    const { categories } = this.state;\n    for (var i = 0; i < categories.length; i++) {\n      for (var j = 0; j < categories[i].bookmarks.length; j++) {\n        if (categories[i].bookmarks[j].id === id) {\n          categories[i].bookmarks = categories[i].bookmarks.filter(\n            (bookmark) => bookmark.id !== id\n          );\n          this.setState({ categories });\n          this.updateList(categories);\n          break;\n        }\n      }\n    }\n    this.handleDialogStatus(dialog);\n  };\n\n  componentDidMount() {\n    var categories = localStorage.getItem(\"categories\");\n    var categories = JSON.parse(categories) ?? [];\n    var settings = JSON.parse(localStorage.getItem(\"settings\")) ?? {\n      colour: \"backgroundColour1\",\n    };\n    this.setState({ categories });\n    this.setState({ settings });\n  }\n\n  render() {\n    console.log(window.location.href);\n    return (\n      <div\n        className={this.state.settings.colour}\n        style={{ paddingBottom: \"0px\" }}\n      >\n        <Container maxWidth=\"lg\">\n          <TopBar\n            dialogComplete={this.state.dialogStatus.active}\n            onChangeDialogStatus={this.handleDialogStatus}\n          />\n          {this.state.dialogStatus.type === \"addCategory\" &&\n            this.state.dialogStatus.active && (\n              <AddCategoryDialog\n                onAddNewCategory={this.handleNewCategory}\n                onChangeDialogStatus={this.handleDialogStatus}\n              />\n            )}\n          {this.state.dialogStatus.type === \"addBookmark\" &&\n            this.state.dialogStatus.active && (\n              <AddBookmarkDialog\n                onAddNewBookmark={this.handleNewBookmark}\n                onChangeDialogStatus={this.handleDialogStatus}\n                categoryId={this.state.selectedCategoryId}\n              />\n            )}\n          {this.state.dialogStatus.type === \"settings\" &&\n            this.state.dialogStatus.active && (\n              <SettingsDialog\n                onAddNewBookmark={this.handleSettings}\n                onChangeDialogStatus={this.handleDialogStatus}\n                onChangeBackgroundColour={this.handleBackgroundColour}\n                masterBackgroundColour={this.state.settings.colour}\n              />\n            )}\n          {this.state.dialogStatus.type === \"editCardItem\" &&\n            this.state.dialogStatus.active && (\n              <EditCardItemDialog\n                onAddNewBookmark={this.handleNewBookmark}\n                onChangeDialogStatus={this.handleDialogStatus}\n                bookmark={this.state.selectedBookmark}\n                onUpdateBookmark={this.handleUpdateBookmark}\n                onDeleteBookmark={this.handleDeleteBookMark}\n              />\n            )}\n          {this.state.dialogStatus.type === \"editCardCategory\" &&\n            this.state.dialogStatus.active && (\n              <EditCardCategoryDialog\n                category={this.state.selectedCategory}\n                onChangeCategoryDetails={this.handleCategoryDetails}\n                onChangeDialogStatus={this.handleDialogStatus}\n              />\n            )}\n          <Grid container spacing={1} direction=\"row\" alignItems=\"stretch\">\n            {this.state.categories.map((item) => (\n              <CategoryCard\n                item={item}\n                key={item.id}\n                onDelete={this.handleDelete}\n                onAddNewBookmarkDialog={this.handleNewBookmarkDialog}\n                onChangeDialogStatus={this.handleDialogStatus}\n              />\n            ))}\n          </Grid>\n          <Snackbar\n            open={this.state.showSnackBar}\n            autoHideDuration={3000}\n            onClose={() =>\n              this.setState({ showSnackBar: !this.state.showSnackBar })\n            }\n          >\n            <MuiAlert\n              onClose={() => !this.state.showSnackBar}\n              elevation={6}\n              variant=\"filled\"\n              severity={this.state.snackBarSeverity}\n            >\n              {this.state.snackBarMessage}\n            </MuiAlert>\n          </Snackbar>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",["53","54"],"/Users/jayanand/Development/React/shortcut_grids/src/index.js",[],["55","56"],"/Users/jayanand/Development/React/shortcut_grids/src/components/CategoryCard.js",["57","58"],"import React, { Component } from \"react\";\nimport {\n  Card,\n  Grid,\n  IconButton,\n  ListItemIcon,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  MenuItem,\n  Menu,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  CardHeader,\n} from \"@material-ui/core\";\nimport { MoreVert, Add } from \"@material-ui/icons\";\nimport CategoryCardItem from \"./CategoryCardItem\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nclass CategoryCard extends Component {\n  state = {\n    openMoreVertMenu: false,\n    menuAnchor: \"\",\n    confirmDialog: false,\n    isMouseInside: false,\n    moreVertOpacity: 0.5,\n    addBookmarkOpacity: 0.4,\n  };\n  mouseEnterMoreVert = () => {\n    this.setState({ moreVertOpacity: 1 });\n  };\n  mouseLeaveMoreVert = () => {\n    this.setState({ moreVertOpacity: 0.5 });\n  };\n\n  mouseEnterAddBookmark = () => {\n    this.setState({ addBookmarkOpacity: 1 });\n  };\n  mouseLeaveAddBookmark = () => {\n    this.setState({ addBookmarkOpacity: 0.5 });\n  };\n  handleConfirmDialogClick = () => {\n    this.setState({ confirmDialog: true });\n  };\n\n  handleConfirmDialogClose = () => {\n    this.setState({ confirmDialog: false });\n  };\n\n  handleClick = (event) => {\n    this.setState({ openMoreVertMenu: true });\n    this.setState({ menuAnchor: event.currentTarget });\n  };\n\n  handleClose = () => {\n    this.setState({ openMoreVertMenu: false });\n    this.setState({ menuAnchor: null });\n  };\n\n  handleEditCategory = () => {\n    this.handleClose();\n    this.props.onChangeDialogStatus({\n      type: \"editCardCategory\",\n      active: true,\n      selectedId: this.props.item.id,\n    });\n  };\n\n  render() {\n    return (\n      <Grid item xs={6} sm={4} md={3}>\n        <Card\n          variant=\"outlined\"\n          style={{\n            backgroundColor: \"transparent\",\n            borderRadius: \"5px\",\n\n            //borderColor: \"white\",\n            backgroundColor: this.props.item.colour,\n            padding: \"0px 0px 0px 0px\",\n          }}\n        >\n          <CardHeader\n            disableTypography\n            style={{ paddingTop: \"5px\" }}\n            title={\n              <Typography\n                noWrap\n                display=\"block\"\n                variant=\"body1\"\n                style={{\n                  color: \"black\",\n                  paddingBottom: \"0px\",\n                }}\n              >\n                {this.props.item.category}\n              </Typography>\n            }\n            subheader={\n              <Typography\n                variant=\"caption\"\n                style={{\n                  color: \"black\",\n                  marginLeft: \"20px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                {this.props.item.categoryDescription}\n              </Typography>\n            }\n            action={\n              <IconButton\n                onClick={this.handleClick}\n                onMouseEnter={this.mouseEnterMoreVert}\n                onMouseLeave={this.mouseLeaveMoreVert}\n              >\n                <MoreVert\n                  fontSize=\"small\"\n                  style={{\n                    // fontSize: \"16\",\n                    padding: \"0px\",\n                    color: \"black\",\n                    opacity: this.state.moreVertOpacity,\n                  }}\n                />\n              </IconButton>\n            }\n          ></CardHeader>\n          <Grid container justify=\"space-between\"></Grid>\n\n          <List\n            style={{\n              padding: \"0px 0px 0px 0px\",\n              margin: \"0px 2px 0px 2px\",\n            }}\n          >\n            {this.props.item.bookmarks.map((bookmark) => (\n              <CategoryCardItem\n                item={bookmark}\n                backgroundColor={this.props.item.colour}\n                key={bookmark.id}\n                onChangeDialogStatus={this.props.onChangeDialogStatus}\n              />\n            ))}\n\n            <ListItem\n              onMouseEnter={this.mouseEnterAddBookmark}\n              onMouseLeave={this.mouseLeaveAddBookmark}\n              alignItems=\"center\"\n              dense\n              button\n              onClick={() =>\n                this.props.onAddNewBookmarkDialog(this.props.item.id, {\n                  type: \"addBookmark\",\n                  active: true,\n                })\n              }\n              style={{ color: \"white\" }}\n            >\n              <ListItemIcon>\n                <Add\n                  fontSize=\"small\"\n                  style={{\n                    textAlign: \"left\",\n                    color: \"black\",\n                    opacity: this.state.addBookmarkOpacity,\n                  }}\n                />\n              </ListItemIcon>\n              <ListItemText\n                style={{\n                  textAlign: \"left\",\n                  color: \"black\",\n                  opacity: this.state.addBookmarkOpacity,\n                }}\n                color=\"action\"\n              >\n                Add Bookmark\n              </ListItemText>\n              <ListItemSecondaryAction>\n                <Menu\n                  open={this.state.openMoreVertMenu}\n                  onClose={this.handleClose}\n                  anchorEl={this.state.menuAnchor}\n                  getContentAnchorEl={null}\n                  anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\",\n                  }}\n                >\n                  <MenuItem onClick={this.handleEditCategory}>\n                    <Grid container>\n                      <EditIcon\n                        style={{ marginRight: \"15px\", fontSize: \"20\" }}\n                      />\n                      <Typography variant=\"caption\">Edit Category</Typography>\n                    </Grid>\n                  </MenuItem>\n                  <MenuItem onClick={this.handleConfirmDialogClick}>\n                    <Grid container>\n                      <DeleteIcon\n                        style={{\n                          marginRight: \"15px\",\n                          color: \"red\",\n                          fontSize: \"20\",\n                        }}\n                      />\n                      <Typography variant=\"caption\" style={{ color: \"red\" }}>\n                        Delete Category\n                      </Typography>\n                    </Grid>\n                  </MenuItem>\n                </Menu>\n                <Dialog\n                  open={this.state.confirmDialog}\n                  onClose={this.handleConfirmDialogClose}\n                  aria-labelledby=\"form-dialog-title\"\n                >\n                  <DialogTitle id=\"form-dialog-title\">\n                    Confirm Delete\n                  </DialogTitle>\n                  <DialogContent>\n                    <DialogContentText>\n                      Are you sure you want to delete category \"\n                      {this.props.item.category}\"? This action cannot be undone.\n                    </DialogContentText>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button\n                      onClick={() => this.props.onDelete(this.props.item.id)}\n                      color=\"secondary\"\n                    >\n                      Confirm Delete\n                    </Button>\n                    <Button\n                      onClick={this.handleConfirmDialogClose}\n                      color=\"primary\"\n                    >\n                      Cancel\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </ListItemSecondaryAction>\n            </ListItem>\n          </List>\n        </Card>\n      </Grid>\n    );\n  }\n}\n\nexport default CategoryCard;\n",["59","60"],"/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/EditCategoryCardDialog.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/components/CategoryCardItem.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/AddCategoryDialog.js",[],["61","62"],"/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/EditCardItemDialog.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/components/TopBar.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/SettingsDialog.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/reportWebVitals.js",[],"/Users/jayanand/Development/React/shortcut_grids/src/components/DialogBoxes/AddBookmarkDialog.js",[],{"ruleId":"63","severity":1,"message":"64","line":166,"column":9,"nodeType":"65","messageId":"66","endLine":166,"endColumn":19},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":9,"column":3,"nodeType":"65","messageId":"75","endLine":9,"endColumn":6},{"ruleId":"76","severity":1,"message":"77","line":87,"column":13,"nodeType":"78","messageId":"79","endLine":87,"endColumn":28},{"ruleId":"67","replacedBy":"80"},{"ruleId":"69","replacedBy":"81"},{"ruleId":"67","replacedBy":"82"},{"ruleId":"69","replacedBy":"83"},"no-redeclare","'categories' is already defined.","Identifier","redeclared","no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"no-unused-vars","'Box' is defined but never used.","unusedVar","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected",["84"],["85"],["84"],["85"],"no-global-assign","no-unsafe-negation"]